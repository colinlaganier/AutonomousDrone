// Generated by gencpp from file rgbdslam/rgbdslam_ros_ui_bRequest.msg
// DO NOT EDIT!


#ifndef RGBDSLAM_MESSAGE_RGBDSLAM_ROS_UI_BREQUEST_H
#define RGBDSLAM_MESSAGE_RGBDSLAM_ROS_UI_BREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rgbdslam
{
template <class ContainerAllocator>
struct rgbdslam_ros_ui_bRequest_
{
  typedef rgbdslam_ros_ui_bRequest_<ContainerAllocator> Type;

  rgbdslam_ros_ui_bRequest_()
    : command()
    , value(false)  {
    }
  rgbdslam_ros_ui_bRequest_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , value(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef uint8_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> const> ConstPtr;

}; // struct rgbdslam_ros_ui_bRequest_

typedef ::rgbdslam::rgbdslam_ros_ui_bRequest_<std::allocator<void> > rgbdslam_ros_ui_bRequest;

typedef boost::shared_ptr< ::rgbdslam::rgbdslam_ros_ui_bRequest > rgbdslam_ros_ui_bRequestPtr;
typedef boost::shared_ptr< ::rgbdslam::rgbdslam_ros_ui_bRequest const> rgbdslam_ros_ui_bRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator1> & lhs, const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator1> & lhs, const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rgbdslam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95aa0151a35e3de365041ffa089ce8c7";
  }

  static const char* value(const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95aa0151a35e3de3ULL;
  static const uint64_t static_value2 = 0x65041ffa089ce8c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rgbdslam/rgbdslam_ros_ui_bRequest";
  }

  static const char* value(const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string command\n"
"bool value\n"
;
  }

  static const char* value(const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rgbdslam_ros_ui_bRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rgbdslam::rgbdslam_ros_ui_bRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RGBDSLAM_MESSAGE_RGBDSLAM_ROS_UI_BREQUEST_H
